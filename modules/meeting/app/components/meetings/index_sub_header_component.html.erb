<%= render(
      Primer::OpenProject::SubHeader.new(
        data: {
          controller: "filter--filters-form",
          "filter--filters-form-output-format-value": "json"
        }
      )
    ) do |subheader|
      subheader.with_filter_component do
        render(Meetings::MeetingFilterButtonComponent.new(query: @query, project: @project))
      end

      subheader.with_segmented_control("aria-label": I18n.t(:label_meeting_date_time)) do |control|
        control.with_item(
          tag: :a,
          icon: :"arrow-right",
          href: dynamic_path,
          label: t(:label_upcoming_meetings_short),
          title: t(:label_upcoming_meetings),
          selected: upcoming_query?
        )
        control.with_item(
          tag: :a,
          icon: :history,
          href: dynamic_path(upcoming: false),
          label: t(:label_past_meetings_short),
          title: t(:label_past_meetings),
          selected: !upcoming_query?
        )
      end

      if render_create_button?
        subheader.with_action_menu(leading_icon: :plus,
                                   trailing_icon: :"triangle-down",
                                   label: label_text,
                                   anchor_align: :end,
                                   size: :small,
                                   button_arguments: { scheme: :primary,
                                                       id: id,
                                                       aria: { label: accessibility_label_text },
                                                       test_selector: "add-meeting-button" }) do |menu|
          menu.with_item(
            label: I18n.t("meeting.types.one_time"),
            tag: :a,
            href: polymorphic_path([:new_dialog, @project, :meetings]),
            content_arguments: { data: { controller: "async-dialog" } }
          ) do |item|
            item.with_description.with_content(t("meeting.types.structured_text"))
          end

          menu.with_item(
            label: I18n.t("meeting.types.recurring"),
            tag: :a,
            href: polymorphic_path([:new_dialog, @project, :meetings], type: :recurring),
            content_arguments: { data: { controller: "async-dialog" } }
          ) do |item|
            item.with_description.with_content(t("meeting.types.recurring_text"))
          end
        end
      end

      subheader.with_bottom_pane_component(mt: 0) do
        render(Meetings::MeetingFiltersComponent.new(query: @query, project: @project))
      end
    end %>
