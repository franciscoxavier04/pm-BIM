<%= render(
      Primer::Alpha::Dialog.new(
        title: I18n.t("meeting.export_pdf_dialog.title"),
        subtitle: I18n.t("meeting.export_pdf_dialog.description"),
        id: MODAL_ID,
        size: :medium_portrait
      )
    ) do |dialog| %>
  <% dialog.with_header(variant: :large) %>
  <% dialog.with_body do %>
    <%= primer_form_with(
          url: project_meeting_path(@project, @meeting, format: :pdf),
          method: :get,
          data: {
            controller: "meetings--export--form",
            action: "submit->meetings--export--form#submitForm",
            "meetings--export--form-job-status-dialog-url-value": job_status_dialog_path("_job_uuid_")
          },
          id: MEETING_PDF_EXPORT_FORM_ID
        ) do
      flex_layout do |modal_body|
        if OpenProject::FeatureDecisions.minutes_styling_meeting_pdf_active?
          modal_body.with_row do
            render(
              Primer::Alpha::RadioButtonGroup.new(
                full_width: true,
                name: "template",
                label: I18n.t("pdf_generator.dialog.templates.label")
              )
            ) do |component|
              component.radio_button(
                label: I18n.t("meeting.export_pdf_dialog.templates.default.label"),
                caption: I18n.t("meeting.export_pdf_dialog.templates.default.caption"),
                value: "default",
                data: {
                  "meetings--export--form-name-param": "default",
                  action: "change->meetings--export--form#templatesChanged"
                },
                checked: true
              )
              component.radio_button(
                label: I18n.t("meeting.export_pdf_dialog.templates.minutes.label"),
                caption: I18n.t("meeting.export_pdf_dialog.templates.minutes.caption"),
                value: "minutes",
                data: {
                  "meetings--export--form-name-param": "minutes",
                  action: "change->meetings--export--form#templatesChanged"
                }
              )
            end
          end
        end
        modal_body.with_row(
          mt: 3,
          data: {
            template: "default",
            "meetings--export--form-target": "inputGroups"
          },
          classes: templates_default[:id] == "default" ? nil : "d-none",
        ) do
          render(
            Primer::Alpha::CheckBox.new(
              id: "pdf_include_participants",
              name: :participants,
              checked: true,
              label: I18n.t("meeting.export_pdf_dialog.include_participants.label"),
              caption: I18n.t("meeting.export_pdf_dialog.include_participants.caption"),
              visually_hide_label: false
            )
          )
        end
        modal_body.with_row(
          mt: 3,
          data: {
            template: "default",
            "meetings--export--form-target": "inputGroups"
          },
          classes: templates_default[:id] == "default" ? nil : "d-none",
        ) do
          render(
            Primer::Alpha::CheckBox.new(
              id: "pdf_include_attachments",
              name: :attachments,
              checked: false,
              label: I18n.t("meeting.export_pdf_dialog.include_attachments.label"),
              caption: I18n.t("meeting.export_pdf_dialog.include_attachments.caption"),
              visually_hide_label: false
            )
          )
        end
        modal_body.with_row(
          mt: 3,
          data: {
            template: "default",
            "meetings--export--form-target": "inputGroups"
          },
          classes: templates_default[:id] == "default" ? nil : "d-none",
        ) do
          render(
            Primer::Alpha::CheckBox.new(
              id: "pdf_include_backlog",
              name: :backlog,
              checked: false,
              label: I18n.t("meeting.export_pdf_dialog.include_backlog.label"),
              caption: I18n.t("meeting.export_pdf_dialog.include_backlog.caption"),
              visually_hide_label: false
            )
          )
        end
        modal_body.with_row(mt: 3) do
          render(
            Primer::Alpha::CheckBox.new(
              id: "pdf_include_outcomes",
              name: :outcomes,
              checked: false,
              label: I18n.t("meeting.export_pdf_dialog.include_outcomes.label"),
              caption: I18n.t("meeting.export_pdf_dialog.include_outcomes.caption"),
              visually_hide_label: false
            )
          )
        end
        if OpenProject::FeatureDecisions.minutes_styling_meeting_pdf_active?
          modal_body.with_row(
            data: {
              template: "minutes",
              "meetings--export--form-target": "inputGroups"
            },
            classes: templates_default[:id] == "minutes" ? nil : "d-none",
            mt: 3
          ) do
            render Primer::Alpha::TextField.new(
              id: "pdf_header_left",
              name: :first_page_header_left,
              label: I18n.t("meeting.export_pdf_dialog.first_page_header_left.label"),
              caption: I18n.t("meeting.export_pdf_dialog.first_page_header_left.caption"),
              input_width: :large,
              visually_hide_label: false,
              value: default_first_page_header_left_text
            )
          end
          modal_body.with_row(
            data: {
              template: "minutes",
              "meetings--export--form-target": "inputGroups"
            },
            classes: templates_default[:id] == "minutes" ? nil : "d-none",
            mt: 3
          ) do
            render Primer::Alpha::TextField.new(
              id: "pdf_author",
              name: :author,
              label: I18n.t("meeting.export_pdf_dialog.author.label"),
              caption: I18n.t("meeting.export_pdf_dialog.author.caption"),
              input_width: :large,
              visually_hide_label: false,
              value: default_author_text
            )
          end
        end
        modal_body.with_row(
          mt: 3,
          data: {
            template: "default",
            "meetings--export--form-target": "inputGroups"
          }
        ) do
          render Primer::Alpha::TextField.new(
            id: "pdf_footer_text",
            name: :footer_text,
            input_width: :large,
            label: I18n.t("meeting.export_pdf_dialog.footer_text.label"),
            caption: I18n.t("meeting.export_pdf_dialog.footer_text.caption"),
            visually_hide_label: false,
            value: default_footer_text
          )
        end
      end
    end %>
  <% end %>
  <% dialog.with_footer do %>
    <%= render(Primer::Beta::Button.new(data: { "close-dialog-id": MODAL_ID })) { I18n.t(:button_cancel) } %>
    <%= render(
          Primer::Beta::Button.new(
            scheme: :primary,
            type: :submit,
            form: MEETING_PDF_EXPORT_FORM_ID,
            data: {
              "close-dialog-id": MODAL_ID
            }
          )
        ) { I18n.t("meeting.export_pdf_dialog.submit_button") } %>
  <% end %>
<% end %>
