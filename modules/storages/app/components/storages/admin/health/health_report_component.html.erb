<%#-- copyright
OpenProject is an open source project management software.
Copyright (C) the OpenProject GmbH

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License version 3.

OpenProject is a fork of ChiliProject, which is a fork of Redmine. The copyright follows:
Copyright (C) 2006-2013 Jean-Philippe Lang
Copyright (C) 2010-2013 the ChiliProject Team

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

See COPYRIGHT and LICENSE files for more details.

++#%>

<%=
  component_wrapper do
    render(Primer::Alpha::Layout.new(stacking_breakpoint: :lg)) do |page|
      page.with_main do
        if @report.nil?
          render(Primer::Beta::Blankslate.new(border: true)) do |placeholder|
            placeholder.with_visual_icon(icon: :meter)
            placeholder.with_heading(tag: :h3) { I18n.t("storages.health.no_report") }
            placeholder.with_description { I18n.t("storages.health.no_report_description") }
            placeholder.with_primary_action(
              tag: :a,
              href: admin_settings_storage_health_status_report_path(model),
              data: { turbo_method: :post, turbo: true },
              aria: { label: I18n.t("storages.health.actions.run_checks") }
            ) do
              I18n.t("storages.health.actions.run_checks")
            end
          end
        else
          flex_layout do |report_container|
            report_container.with_row do
              concat(render(Primer::Beta::Octicon.new(mr: 2, **summary_icon(@report.tally))))
              concat(render(Primer::Beta::Text.new(font_weight: :bold)) { @report.humanize_summary })
            end

            report_container.with_row(mt: 2) do
              render(Primer::Beta::Text.new) do
                if @report.healthy?
                  I18n.t("storages.health.summary.success")
                elsif @report.unhealthy?
                  I18n.t("storages.health.summary.failure")
                else
                  I18n.t("storages.health.summary.warning")
                end
              end
            end

            @report.each_pair do |_key, group_result|
              report_container.with_row(mt: 3) do
                render(Primer::Beta::BorderBox.new(test_selector: "op-storages--health-report-group")) do |box|
                  box.with_header do
                    flex_layout(justify_content: :space_between, classes: "flex-wrap") do |header|
                      header.with_column do
                        render(Primer::Beta::Text.new(font_weight: :bold)) { group_result.humanize_title }
                      end

                      header.with_column do
                        concat(render(Primer::Beta::Octicon.new(mr: 2, **summary_icon(group_result.tally))))
                        concat(render(Primer::Beta::Text.new) { group_result.humanize_summary })
                      end
                    end
                  end

                  group_result.each_pair do |_key, value|
                    box.with_row do
                      render(Storages::Admin::Health::CheckResultComponent.new(group: group_result.key, result: value))
                    end
                  end
                end
              end
            end
          end
        end
      end

      page.with_sidebar(col_placement: :end, row_placement: :end)
    end
  end
%>
