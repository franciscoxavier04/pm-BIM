<%= render(
      Primer::Alpha::Dialog.new(
        title: I18n.t("pdf_generator.dialog.title"),
        id: MODAL_ID,
        size: :medium_portrait
      )
    ) do |dialog| %>
  <% dialog.with_header(variant: :large) %>
  <% dialog.with_body do %>
    <%= primer_form_with(
          url: generate_pdf_work_package_path(work_package),
          data: {
            turbo: false,
            "application-target": "dynamic",
            controller: "work-packages--export--generate-pdf-form"
          },
          id: GENERATE_PDF_FORM_ID
        ) do
          flex_layout do |modal_body|
            modal_body.with_row(mt: 0) do
              render(
                Primer::Alpha::Select.new(
                  name: "template",
                  label: I18n.t("pdf_generator.dialog.templates.label"),
                  caption: templates_default&.caption || I18n.t("pdf_generator.dialog.templates.none_enabled"),
                  disabled: templates_default.nil?,
                  input_width: :large,
                  data: {
                    "work-packages--export--generate-pdf-form-target": "templates",
                    action: "change->work-packages--export--generate-pdf-form#templatesChanged"
                  }
                )
              ) do |component|
                selected = templates_default&.id
                templates_options.each do |entry|
                  component.option(
                    label: entry.label,
                    value: entry.id,
                    selected: selected == entry.id,
                    data: {
                      caption: entry.caption
                    }
                  )
                end
              end
            end
            modal_body.with_row(mt: 3) do
              render(
                Primer::Alpha::CheckBox.new(
                  id: "hyphenation_enabled",
                  name: "hyphenation",
                  checked: false,
                  value: "true",
                  unchecked_value: "false",
                  label: I18n.t("pdf_generator.dialog.hyphenation.label"),
                  caption: I18n.t("pdf_generator.dialog.hyphenation.caption"),
                  visually_hide_label: false
                )
              )
            end
            modal_body.with_row(mt: 3) do
              render(
                Primer::Alpha::Select.new(
                  name: "hyphenation_language",
                  label: I18n.t("pdf_generator.dialog.hyphenation_language.label"),
                  input_width: :large
                )
              ) do |component|
                selected = hyphenation_default[:value]
                hyphenation_options.each do |entry|
                  component.option(label: entry[:label], value: entry[:value], selected: selected == entry[:value])
                end
              end
            end
            modal_body.with_row(
              mt: 3,
              classes: templates_default&.id == "attributes" ? nil : "d-none",
              data: {
                template: "attributes",
                "work-packages--export--generate-pdf-form-target": "inputGroups"
              }
            ) do
              render Primer::Alpha::TextField.new(
                name: :footer_text_right,
                label: I18n.t("pdf_generator.dialog.footer_right.label"),
                caption: I18n.t("pdf_generator.dialog.footer_right.caption"),
                visually_hide_label: false,
                value: default_footer_text_right
              )
            end
            modal_body.with_row(
              mt: 3,
              classes: templates_default&.id == "contract" ? nil : "d-none",
              data: {
                template: "contract",
                "work-packages--export--generate-pdf-form-target": "inputGroups"
              }
            ) do
              render Primer::Alpha::TextField.new(
                name: :footer_text_center,
                label: I18n.t("pdf_generator.dialog.footer_center.label"),
                caption: I18n.t("pdf_generator.dialog.footer_center.caption"),
                visually_hide_label: false,
                value: default_footer_text_center
              )
            end
          end
        end %>
  <% end %>
  <% dialog.with_footer do %>
    <%= render(Primer::ButtonComponent.new(data: { "close-dialog-id": MODAL_ID })) { I18n.t(:button_cancel) } %>
    <%= render(
          Primer::ButtonComponent.new(
            scheme: :primary,
            type: :submit,
            form: GENERATE_PDF_FORM_ID,
            disabled: templates_default.nil?,
            data: { "close-dialog-id": MODAL_ID }
          )
        ) { I18n.t("pdf_generator.dialog.submit") } %>
  <% end %>
<% end %>
